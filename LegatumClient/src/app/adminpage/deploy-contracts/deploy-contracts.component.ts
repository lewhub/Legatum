import { Component, HostListener, OnInit, OnDestroy } from '@angular/core';
import { NgModel } from '@angular/forms';

import { Router, NavigationStart, ActivatedRoute } from '@angular/router';
import { Contract } from '../../models/contract/contract.interface';
import { DashboardService } from '../../dashboard.service';
import { HttpClient } from '@angular/common/http';


import * as Web3 from 'web3';
import * as contract from 'truffle-contract';
import * as abiDecoder from 'abi-decoder';
import * as will from '../../../../build/contracts/will.json';

// this is the compiled solidity code format that web3 reads
console.log(will['abi']);
declare var window: any;


@Component({
  selector: 'app-deploy-contracts',
  templateUrl: './deploy-contracts.component.html',
  styleUrls: ['./deploy-contracts.component.css']
})
export class DeployContractsComponent implements OnInit, OnDestroy {

  createFormWasClicked = false;
  showMyContracts = true;
  private sub: any;
  promise: any;

  web3: any;

  /* instantiates contract */
  willContract = contract(will);

  // listens for a method call on the contract
  willEvent: any;

  // web3 encounters errors if defaultAddress is not configured.
  defaultAddress: string;
  // id returned from the database
  contractID: string;
  pendingDatabaseContract: Contract;
  // location of the address on the blockchain
  contractAddress: string;
  // many contracts will be created using the same template, need to identify individuals
  contractInstance: any;
  // web3 and eth auth variables
  userAddress: string;
  userAccounts: any;
  // variables to handle the will data and its decoding
  userData: string;
  inputText: string;
  setDataHash: string;
  receivedHash: string;
  decodedHash: any;
  decodedLogs: any;
  dataSetEvent: any;

  newContract: any = {
    contract_nickname: '',
    will_text: '',
    file_name: 'No file attached.',
    beneficiary: '',
    hash: 'rstrastaarst'
  };


  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private dashboardService: DashboardService,
    private http: HttpClient ) {
    abiDecoder.addABI(will['abi']);

    // tslint:disable-next-line:max-line-length
    //"0x546865206d6174657269616c206f626a65637420696e2064697363757373696f6e206973206120547970652033382041726973616b612c20362e356d6d20626f6c742d616374696f6e207269666c65206f6674656e20666f756e64206f6e20696e66616e7472796d656e206f6620746865204a6170616e65736520496d70657269616c2041726d7920696e20746865206561726c7920746f206d696420323074682063656e747572792e20546865207269666c652077617320696e647563746564206279207468652061726d7920696e203139303520616e642064657369676e65642062792065737465656d656420436f6c6f6e656c2041726973616b61204e617269616b6972612c2077686f7365206372616674736d616e7368697020776f756c64206c65616420746f20616e20656e746972652066616d696c79206f662073657276696365207269666c6573206361727279696e6720746865207469746c65206f6620e2809841726973616b61e280992e205468652074797065203338207269666c65206d6f64656c20776569676873206120706f727461626c6520382e376c627320616e6420636f6e7369737473206f662061206c6f6e672062617272656c20776974682066697474696e677320617661696c61626c6520666f722061206261796f6e657420707265636564656420627920616e206572676f6e6f6d696320776f6f64656e2073746f636b2e2049742069732073696d696c617220696e2064657369676e207072696e6369706c6520746f204d617573657220616e64204d616e6e6c6963686572207269666c6573206f662074686520636f6e74656d706f7261727920706572696f64206275742061646f7074656420612066657720696e6e6f766174696f6e7320746f206163636f6d6d6f646174652074686520736d616c6c65722073746174757265206f66204a6170616e65736520736f6c64696572732e20546865207374616e64617264206d6167617a696e65206361706163697479206f662074686973207269666c6520686f75736573203520726f756e6473206f6620362e357835306d6d2063616c696265722062756c6c6574732077686963682063617272696573206c657373207265636f696c20616e6420616c6c6f777320612072617465206f66206669726520657374696d6174656420736f6d657768657265206265747765656e2074686972747920726f756e647320706572206d696e75746520696e207468652068616e6473206f66206120747261696e6564206d61726b736d616e2e205468652072656172206f6620746865207269666c6520686f7573657320746865206d616a6f72697479206f662069747320666972696e67206d656368616e69736d73207769746820746865207269666c65e280997320726563656976657220616e6420626f6c742068616e646c65206265696e6720656173696c792061636365737369626c652e204e6f7461626c792c2074686520726563656976657220636172726965732061207374616d70206f662061203136206c6561666564206368727973616e7468656d756d20666c6f7765722c207369676e696679696e6720746865207269666c65e28099732062656c6f6e67696e6720746f2074686520456d7065726f72206f66204a6170616e20616e642073657276696e6720617320612073796d626f6c206f6620616c6c656769616e63652e20476976656e2074686520686973746f726963616c206261636b67726f756e64206f66204a6170616ee28099732053616d757261692077617272696f7220636c6173732c20686f6c64696e672074686973207269666c65206d61792068617665206265656e20612063756c747572616c2072656d696e646572206f66206120646565706c7920656e677261696e65642077617272696f72e2809973207370697269742e205468652066726f6e74206f6620746865207269666c6520746170657273207468656e206f66662066726f6d20746865207369676874656420726563656976657220616e64206d6167617a696e65206368616d626572206f6e77617264732c206d6f756e74696e672061206d61746368696e672069726f6e207369676874206f6e2074686520656e64206f66206974732033312e353020696e63682062617272656c2e20486176696e67207365656e2061207365727669636520706572696f64206f66206f76657220666f72747920796561727320776974682075736520696e204a6170616e6573652c204368696e65736520616e64206576656e204772656174204272697461696ee28099732041726d792c207468652041726973616b6120547970652033382063616e20626520736166656c79206c6162656c65642061732072656c6961626c652077697468206f76657220332c3430302c303030206d616e756661637475726564206163726f737320737461746520617273656e616c732e2054686973207370656369666963207269666c6520686f7765766572206c6561766573206120706f74656e7469616c206d79737465727920746f2073706563756c61746520696e207265676172647320746f2069747320686973746f727920616e64206d6f6d656e7473206265666f726520697473206163717569736974696f6e2e20546865207269666c65207761732074616b656e206f6666206f662061204a6170616e65736520736f6c6469657220627920556e6974656420537461746573204d6172696e6520436f727073205365726765616e742c20526f6265727420436f70656c616e6420696e20417072696c206f66203139343520647572696e67207468652066697273742077617665206f6620696e766173696f6e206f6e20746865206e6f72746865726e20656e64206f66204f6b696e6177612049736c616e642e204e6f7461626c792c205365726765616e7420436f70656c616e6420616e64206869732027452720636f6d70616e79206f66207468652032326e64204d6172696e657320726567696d656e742c20367468204d6172696e65204469766973696f6e20636f6e736973746564206f66207468652076616e6775617264206f6e2074686573652069736c616e647320616e642077657265206e6f7465642061732074686520666972737420746f2063617074757265207365766572616c204a6170616e657365206e6176616c20706572736f6e6e656c2e20546f7761726473207468652066726f6e74206f662074686520776f6f64656e2073746f636b206f6e206974732072696768742068616e642073696465206a7573742062656c6f772074686520656a656374696f6e20706f696e742061726520666f75722064697374696e637420736c617368206d61726b732e205468657365206d61726b73206d617920696d706c792061207374727567676c65206265747765656e206974732070726576696f7573206f776e657220616e642068697320656e656d792c207061696e74696e6720616e20696d616765206f66206120726169736564207269666c6520746f206465666c6563742074686520646f776e776172647320736c6173686573206f66206120626c6164656420776561706f6e2c20776865746865722069742062652061206261796f6e6574206f722061206d6163686574652e2041626f7665206f6e65206f66207468657365206d61726b73206c6965732061206368697020696e2074686520776f6f6420746861742075706f6e207265656e6163746d656e74207375676765737473207468617420666f722061206d6f6d656e742c2074686520626c616465642065646765206f662077686174657665722073747275636b207468652073746f636b20626563616d65206c6f6467656420616e64207761732073756273657175656e746c79207477697374656420736c696768746c7920746f206672656520697473656c662c206c656176696e6720626568696e6420616e20616e676c656420696e64656e746174696f6e2e20476976656e20746861742074686520646f6e6f72206f662074686973207269666c65207761732061205553204d6172696e652c20616e64204d6172696e65732061637469766520696e20746865205061636966696320546865617472652077657265206e6f74656420746f206361727279206d616368657465732c206120706572696c6f757320656e636f756e746572206265747765656e204a6170616e65736520736f6c6469657220616e64205553204d6172696e65206d6179206265206d6f7265206f66206120706f73736962696c69747920726174686572207468616e206120726f6d616e746963697a6174696f6e2e20"

    this.userAddress = '0x5b93296d1aa3af945f64757fffec739c4dd96a1f';
  }

  ngOnInit() {
    this.mountPendingContract();
    this.checkAndInstantiateWeb3();
    this.onReady();
  }

  ngOnDestroy() {

  }

  /** subscribes to dashboard service, retrieves & mounts
  pending contract that matches specified contract id  **/
  mountPendingContract(): void {
    this.sub = this.route.params.subscribe(params => {
      this.contractID = params['contract-id'];
      console.log('this is contractID', this.contractID);

      this.retrievePendingContract()
        .then((results) => {
          console.log('the resulting contract is', results);
          this.pendingDatabaseContract = results;
        });
    });
  }

  retrievePendingContract(): Promise<any> {
    this.promise = new Promise((resolve, reject) => {
      this.dashboardService.currentPending().filter(pendingContract => {
        if (pendingContract.contract_id === this.contractID) {
          resolve(pendingContract);
        }
      });
    });
    return this.promise;
  }

  checkAndInstantiateWeb3 = () => {
    // Checking if Web3 has been injected by the browser (Mist/MetaMask)
    if (typeof window.web3 !== 'undefined') {
      // Use Mist/MetaMask's provider
      console.log('attaching to metamask');
      this.web3 = new Web3(window.web3.currentProvider);
    } else {
      console.log(
        'No web3 detected. Falling back to infura.'
      );
      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
      this.web3 = new Web3(
        new Web3.providers.HttpProvider('https://ropsten.infura.io/mm9Q2HbEIQKJkV9Sy4xb')
      );
    }
  }

  onReady = () => {
    // Bootstrap the willContract abstraction for Use.
    this.willContract.setProvider(this.web3.currentProvider);
    this.web3.eth.defaultAccount = '0x9DF513C71A014A4a6D131Fd2E93A0F78022d9E54';
    this.defaultAddress = this.web3.eth.defaultAccount;
    console.log('preparing contract, setting provider: ', this.web3.currentProvider);


    // Get the initial account balance so it can be displayed.
    // this.web3.eth.getAccounts((error, accs) => {
    //   console.log(accs);
    //   if (error) {
    //     console.log('There was an error fetching your accounts.');
    //     return;
    //   }
    //   console.log('these are accs', accs);
    //   if (accs.length === 0) {
    //     console.log(
    //       'Couldn\'t get any accounts! Make sure your Ethereum client is configured correctly.'
    //     );
    //     return;
    //   }
    //   console.log('callback worked');
    //   this.userAccounts = accs;
    //   this.userAddress = this.userAccounts[0];
    // });
  }

  deployWill = () => {
    this.willContract
      .new({
        from: this.defaultAddress,
      })
      .then((result) => {
        console.log('did this contract deploy?', result);
        this.contractAddress = result.address;
        this.contractInstance = result;
        // this.dataSetEvent = this.contractInstance.WillUpdate();
        // this.dataSetEvent.watch(function (error, success) {
        //   // result will contain various information
        //   // including the argumets given to the WillUpdate
        //   // call.
        //   if (!error) {
        //     console.log(success);
        //   }
        // });
      })
      .catch(e => {
        console.log(e);
      });
  }


  setWillData = () => {
    // this.userData = "0x546865206d6174657269616c206f626a65637420696e2064697363757373696f6e206973206120547970652033382041726973616b612c20362e356d6d20626f6c742d616374696f6e207269666c65206f6674656e20666f756e64206f6e20696e66616e7472796d656e206f6620746865204a6170616e65736520496d70657269616c2041726d7920696e20746865206561726c7920746f206d696420323074682063656e747572792e20546865207269666c652077617320696e647563746564206279207468652061726d7920696e203139303520616e642064657369676e65642062792065737465656d656420436f6c6f6e656c2041726973616b61204e617269616b6972612c2077686f7365206372616674736d616e7368697020776f756c64206c65616420746f20616e20656e746972652066616d696c79206f662073657276696365207269666c6573206361727279696e6720746865207469746c65206f6620e2809841726973616b61e280992e205468652074797065203338207269666c65206d6f64656c20776569676873206120706f727461626c6520382e376c627320616e6420636f6e7369737473206f662061206c6f6e672062617272656c20776974682066697474696e677320617661696c61626c6520666f722061206261796f6e657420707265636564656420627920616e206572676f6e6f6d696320776f6f64656e2073746f636b2e2049742069732073696d696c617220696e2064657369676e207072696e6369706c6520746f204d617573657220616e64204d616e6e6c6963686572207269666c6573206f662074686520636f6e74656d706f7261727920706572696f64206275742061646f7074656420612066657720696e6e6f766174696f6e7320746f206163636f6d6d6f646174652074686520736d616c6c65722073746174757265206f66204a6170616e65736520736f6c64696572732e20546865207374616e64617264206d6167617a696e65206361706163697479206f662074686973207269666c6520686f75736573203520726f756e6473206f6620362e357835306d6d2063616c696265722062756c6c6574732077686963682063617272696573206c657373207265636f696c20616e6420616c6c6f777320612072617465206f66206669726520657374696d6174656420736f6d657768657265206265747765656e2074686972747920726f756e647320706572206d696e75746520696e207468652068616e6473206f66206120747261696e6564206d61726b736d616e2e205468652072656172206f6620746865207269666c6520686f7573657320746865206d616a6f72697479206f662069747320666972696e67206d656368616e69736d73207769746820746865207269666c65e280997320726563656976657220616e6420626f6c742068616e646c65206265696e6720656173696c792061636365737369626c652e204e6f7461626c792c2074686520726563656976657220636172726965732061207374616d70206f662061203136206c6561666564206368727973616e7468656d756d20666c6f7765722c207369676e696679696e6720746865207269666c65e28099732062656c6f6e67696e6720746f2074686520456d7065726f72206f66204a6170616e20616e642073657276696e6720617320612073796d626f6c206f6620616c6c656769616e63652e20476976656e2074686520686973746f726963616c206261636b67726f756e64206f66204a6170616ee28099732053616d757261692077617272696f7220636c6173732c20686f6c64696e672074686973207269666c65206d61792068617665206265656e20612063756c747572616c2072656d696e646572206f66206120646565706c7920656e677261696e65642077617272696f72e2809973207370697269742e205468652066726f6e74206f6620746865207269666c6520746170657273207468656e206f66662066726f6d20746865207369676874656420726563656976657220616e64206d6167617a696e65206368616d626572206f6e77617264732c206d6f756e74696e672061206d61746368696e672069726f6e207369676874206f6e2074686520656e64206f66206974732033312e353020696e63682062617272656c2e20486176696e67207365656e2061207365727669636520706572696f64206f66206f76657220666f72747920796561727320776974682075736520696e204a6170616e6573652c204368696e65736520616e64206576656e204772656174204272697461696ee28099732041726d792c207468652041726973616b6120547970652033382063616e20626520736166656c79206c6162656c65642061732072656c6961626c652077697468206f76657220332c3430302c303030206d616e756661637475726564206163726f737320737461746520617273656e616c732e2054686973207370656369666963207269666c6520686f7765766572206c6561766573206120706f74656e7469616c206d79737465727920746f2073706563756c61746520696e207265676172647320746f2069747320686973746f727920616e64206d6f6d656e7473206265666f726520697473206163717569736974696f6e2e20546865207269666c65207761732074616b656e206f6666206f662061204a6170616e65736520736f6c6469657220627920556e6974656420537461746573204d6172696e6520436f727073205365726765616e742c20526f6265727420436f70656c616e6420696e20417072696c206f66203139343520647572696e67207468652066697273742077617665206f6620696e766173696f6e206f6e20746865206e6f72746865726e20656e64206f66204f6b696e6177612049736c616e642e204e6f7461626c792c205365726765616e7420436f70656c616e6420616e64206869732027452720636f6d70616e79206f66207468652032326e64204d6172696e657320726567696d656e742c20367468204d6172696e65204469766973696f6e20636f6e736973746564206f66207468652076616e6775617264206f6e2074686573652069736c616e647320616e642077657265206e6f7465642061732074686520666972737420746f2063617074757265207365766572616c204a6170616e657365206e6176616c20706572736f6e6e656c2e20546f7761726473207468652066726f6e74206f662074686520776f6f64656e2073746f636b206f6e206974732072696768742068616e642073696465206a7573742062656c6f772074686520656a656374696f6e20706f696e742061726520666f75722064697374696e637420736c617368206d61726b732e205468657365206d61726b73206d617920696d706c792061207374727567676c65206265747765656e206974732070726576696f7573206f776e657220616e642068697320656e656d792c207061696e74696e6720616e20696d616765206f66206120726169736564207269666c6520746f206465666c6563742074686520646f776e776172647320736c6173686573206f66206120626c6164656420776561706f6e2c20776865746865722069742062652061206261796f6e6574206f722061206d6163686574652e2041626f7665206f6e65206f66207468657365206d61726b73206c6965732061206368697020696e2074686520776f6f6420746861742075706f6e207265656e6163746d656e74207375676765737473207468617420666f722061206d6f6d656e742c2074686520626c616465642065646765206f662077686174657665722073747275636b207468652073746f636b20626563616d65206c6f6467656420616e64207761732073756273657175656e746c79207477697374656420736c696768746c7920746f206672656520697473656c662c206c656176696e6720626568696e6420616e20616e676c656420696e64656e746174696f6e2e20476976656e20746861742074686520646f6e6f72206f662074686973207269666c65207761732061205553204d6172696e652c20616e64204d6172696e65732061637469766520696e20746865205061636966696320546865617472652077657265206e6f74656420746f206361727279206d616368657465732c206120706572696c6f757320656e636f756e746572206265747765656e204a6170616e65736520736f6c6469657220616e64205553204d6172696e65206d6179206265206d6f7265206f66206120706f73736962696c69747920726174686572207468616e206120726f6d616e746963697a6174696f6e2e20";
    this.userData = this.pendingDatabaseContract.will_text;
    console.log('Hello, I am setWillData() this is the user address', this.userAddress);
    console.log('Hello, I am setWillData() this is the default Address', this.defaultAddress);

    console.log(this.contractInstance, 'succesful contract instantiation, this is the instance');
    this.contractInstance.setWillContents(this.userAddress, this.userData, { from: this.defaultAddress.toString() })
      .then((result) => {
        console.log('this is the stored contract data', result);
        this.setDataHash = result.tx;
        this.updateAndComplete();
      })
      .catch(e => {
        console.log(e);
      });
  }


  getWillText = () => {
    this.contractInstance.getWillData()
      .then((result) => {
        console.log('this is result', result);
        this.receivedHash = result;
        this.decodedHash = this.web3.utils.toAscii(this.receivedHash.toString());
        console.log(this.decodedHash);
      })
      .catch((e) => {
        console.log(e);
      });
  }

  handleClickOnReview() {
    console.log('Details: ', this.newContract);
    this.dashboardService.setContractInfo(this.newContract);
    this.router.navigate(['/dashboard/review-contract'], { queryParams: { newContract: this.newContract } });
  }

  updateAndComplete() {
    this.http.post('/updatecontract', {
      will_hash: this.receivedHash,
      contract_addr: this.contractAddress,
      pending: false,
      hash: this.setDataHash,
      contract_id: this.contractID
    })
      .subscribe(res => {
        console.log(res);
      },
     err => {
       console.log('error occured');
     });
  }

}
